1) To implement the pipeline, mimicing the architecture i.e., having five stages and assigning
each stage some instruction to execute is an obvious idea.
2) Considering this idea, the first problem is how do you communicate between the stages? i.e.,
how do you store the instruction and how do you transfer the instruction from this to the next stage?

3) For this, we can have 5 arrays, for each of the stages to store the instruction being executed by that stage.
4) The next step is transfering the instruction, for this we have to determine whether there are any stalls
in any of the stages. If a stage is not done executing, then the instruction of this stage cannot be
forwarded. 
5) For this, we can have 5 vars again, to store the status of each stage. If False, it is not executing any instruction else it is.
6) For stage 1, we can have a PC(counter var), to know which instruction to fetch next.
7) Any stage cannot forward or take in new instruction if the next stage is not done executing.
8) The next thing is the identification of stalls.
9) For this, we can store for each register - its current status(needs to be updated or ready to use) and the earliest CLOCK-cycle when it's ready to use.
10) This helps us in determining stalls, e.g., consider the following case:

    I1 - add $t1,$t2,$t3 
    I2 - add $t5,$t1,$t3

    Here,I2 is dependent on I1(as $t1 needs to be updated before it is used).
    So, will executing I1 we set the value corresponding to r1 as vr1 = [1,CLOCK-Cycle]
    Where CLOCK-Cycle is the appropriate Cycle when it can be used(depending on whether data forwarding is on or off).
11) To determine stalls, we have to compare max(values of CLOCK-cycles of registers begin used for computation) with current clock-cycle. If the max is greater than current clock-cycle + 1,
there is going to be a stall.
12) Once this is done, we mark the respective stage with stall and transfer an empty instruction to the next stage indicating them do nothing. Although some stages(next to stall stage) might execute prior instructions.
13) For jump instructions, the correct instruction is determined during the ID/RF stage. The IF stage has already
fetched the next instruction(so there will NOT BE ANY STALL).
14) Once we get the next instruction, we stash the current execution and re-fetch the next instruction and update the PC.
15) Stalls only occur in the data dependency cases.